"""
Functions for working with census vectors (variables).
"""

import requests
import pandas as pd
from typing import Optional

from .settings import get_api_key
from .utils import validate_dataset
from .cache import get_cached_data, cache_data


def list_census_vectors(
    dataset: str,
    use_cache: bool = True,
    quiet: bool = False,
    api_key: Optional[str] = None
) -> pd.DataFrame:
    """
    Query the CensusMapper API for available vectors for a given dataset.
    
    Parameters
    ----------
    dataset : str
        The dataset to query for available vectors (e.g., 'CA16').
    use_cache : bool, default True
        If True, data will be read from local cache if available.
    quiet : bool, default False  
        When True, suppress messages and warnings.
    api_key : str, optional
        API key for CensusMapper API. If None, uses environment variable.
        
    Returns
    -------
    pd.DataFrame
        DataFrame with columns:
        - vector: Short code for the variable
        - type: Whether it's a female, male, or total aggregate
        - label: Name of the variable
        - units: Whether the value represents a numeric integer, percentage, 
                dollar figure, or ratio
        - parent_vector: Hierarchical relationship
        - aggregation: Whether the value is additive or a transformation
        - details: Detailed description generated by traversing all labels
                  within its hierarchical structure
                  
    Examples
    --------
    >>> import pycancensus as pc
    >>> vectors = pc.list_census_vectors("CA16")
    >>> print(vectors.head())
    """
    dataset = validate_dataset(dataset)
    
    if api_key is None:
        api_key = get_api_key()
        if api_key is None:
            raise ValueError(
                "API key required. Set with set_api_key() or CANCENSUS_API_KEY "
                "environment variable."
            )
    
    # Check cache first
    if use_cache:
        cache_key = f"vectors_{dataset}"
        cached_data = get_cached_data(cache_key)
        if cached_data is not None:
            if not quiet:
                print("Reading vectors from cache...")
            return cached_data
    
    # Query API
    base_url = "https://censusmapper.ca/api/v1"
    params = {
        "dataset": dataset,
        "api_key": api_key,
        "format": "json"
    }
    
    try:
        if not quiet:
            print(f"Querying CensusMapper API for {dataset} vectors...")
            
        response = requests.get(f"{base_url}/list_vectors", params=params, timeout=30)
        response.raise_for_status()
        
        data = response.json()
        
        if "vectors" not in data:
            raise ValueError("Invalid API response: missing 'vectors' field")
            
        df = pd.DataFrame(data["vectors"])
        
        # Cache the result
        if use_cache:
            cache_data(cache_key, df)
            
        if not quiet:
            print(f"Retrieved {len(df)} vectors")
            
        return df
        
    except requests.exceptions.RequestException as e:
        raise RuntimeError(f"API request failed: {e}")
    except Exception as e:
        raise RuntimeError(f"Failed to process API response: {e}")


def search_census_vectors(
    search_term: str,
    dataset: str,
    type_filter: Optional[str] = None,
    use_cache: bool = True,
    quiet: bool = False,
    api_key: Optional[str] = None
) -> pd.DataFrame:
    """
    Search for census vectors by name or description.
    
    Parameters
    ----------
    search_term : str
        Term to search for in vector labels or details.
    dataset : str
        The dataset to search in (e.g., 'CA16').
    type_filter : str, optional
        Filter by vector type ('Total', 'Male', 'Female').
    use_cache : bool, default True
        If True, uses cached vector list if available.
    quiet : bool, default False
        When True, suppress messages and warnings.
    api_key : str, optional
        API key for CensusMapper API.
        
    Returns
    -------
    pd.DataFrame
        Filtered DataFrame of vectors matching the search term.
        
    Examples
    --------
    >>> import pycancensus as pc
    >>> income_vectors = pc.search_census_vectors("income", "CA16")
    >>> total_pop = pc.search_census_vectors("population", "CA16", type_filter="Total")
    """
    # Get all vectors first
    vectors_df = list_census_vectors(
        dataset=dataset,
        use_cache=use_cache,
        quiet=quiet,
        api_key=api_key
    )
    
    # Search in both label and details columns (case-insensitive)
    label_mask = vectors_df["label"].str.contains(search_term, case=False, na=False)
    details_mask = vectors_df["details"].str.contains(search_term, case=False, na=False) if "details" in vectors_df.columns else pd.Series([False] * len(vectors_df))
    
    mask = label_mask | details_mask
    filtered_df = vectors_df[mask].copy()
    
    # Filter by type if specified
    if type_filter is not None:
        type_mask = filtered_df["type"] == type_filter
        filtered_df = filtered_df[type_mask].copy()
    
    if not quiet and len(filtered_df) > 0:
        print(f"Found {len(filtered_df)} vectors matching '{search_term}'")
    elif not quiet:
        print(f"No vectors found matching '{search_term}'")
        
    return filtered_df


def find_census_vectors(
    search_term: str,
    dataset: str,
    type_filter: Optional[str] = None,
    interactive: bool = False,
    use_cache: bool = True,
    quiet: bool = False,
    api_key: Optional[str] = None
) -> pd.DataFrame:
    """
    Find census vectors with enhanced search capabilities.
    
    This is an alias for search_census_vectors with potential for future
    enhancement with fuzzy matching and interactive selection.
    
    Parameters
    ----------
    search_term : str
        Term to search for in vector labels or details.
    dataset : str
        The dataset to search in (e.g., 'CA16').
    type_filter : str, optional
        Filter by vector type ('Total', 'Male', 'Female').
    interactive : bool, default False
        If True, provides interactive selection (future enhancement).
    use_cache : bool, default True
        If True, uses cached vector list if available.
    quiet : bool, default False
        When True, suppress messages and warnings.
    api_key : str, optional
        API key for CensusMapper API.
        
    Returns
    -------
    pd.DataFrame
        Filtered DataFrame of vectors matching the search term.
    """
    if interactive:
        # TODO: Implement interactive vector selection
        print("Interactive mode not yet implemented. Using standard search.")
    
    return search_census_vectors(
        search_term=search_term,
        dataset=dataset,
        type_filter=type_filter,
        use_cache=use_cache,
        quiet=quiet,
        api_key=api_key
    )