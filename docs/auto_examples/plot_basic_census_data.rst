
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_basic_census_data.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_basic_census_data.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_basic_census_data.py:


Basic Census Data Access
=========================

This example demonstrates how to access Canadian Census data using pycancensus,
covering the essential functions for getting started with census data analysis.

.. GENERATED FROM PYTHON SOURCE LINES 10-15

Setting up pycancensus
----------------------

First, we need to import pycancensus and set up our API key.
You can get a free API key at: https://censusmapper.ca/users/sign_up

.. GENERATED FROM PYTHON SOURCE LINES 15-27

.. code-block:: Python


    import pycancensus as pc
    import pandas as pd

    # Set your API key (you'll need to replace this with your actual key)
    # For demonstration, we'll handle the case where no key is set
    try:
        # pc.set_api_key("your_api_key_here")  # Uncomment and add your key
        print("API key setup - replace 'your_api_key_here' with your actual key")
    except:
        print("No API key set - some examples may not work")


.. GENERATED FROM PYTHON SOURCE LINES 28-32

Exploring Available Datasets
-----------------------------

Let's start by exploring what Census datasets are available.

.. GENERATED FROM PYTHON SOURCE LINES 32-41

.. code-block:: Python


    print("Available Census Datasets:")
    try:
        datasets = pc.list_census_datasets()
        print(datasets)
    except Exception as e:
        print(f"Error accessing datasets: {e}")
        print("Make sure you have set your API key!")


.. GENERATED FROM PYTHON SOURCE LINES 42-46

Finding Census Regions
-----------------------

Next, let's explore the geographic regions available in the Census.

.. GENERATED FROM PYTHON SOURCE LINES 46-63

.. code-block:: Python


    print("\nExploring Census Regions:")
    try:
        # Get regions for the 2021 Census
        regions = pc.list_census_regions("CA21")
        print(f"Found {len(regions)} regions in CA21 dataset")
        print("\nSample regions:")
        print(regions.head())
    
        # Search for specific regions (Vancouver)
        print("\nSearching for Vancouver regions:")
        vancouver_regions = pc.search_census_regions("Vancouver", "CA21")
        print(vancouver_regions[["region", "name", "level", "pop"]].head())
    
    except Exception as e:
        print(f"Error accessing regions: {e}")


.. GENERATED FROM PYTHON SOURCE LINES 64-68

Discovering Census Variables
----------------------------

Census data is organized into vectors (variables). Let's explore what's available.

.. GENERATED FROM PYTHON SOURCE LINES 68-85

.. code-block:: Python


    print("\nExploring Census Variables:")
    try:
        # List available vectors
        vectors = pc.list_census_vectors("CA21")
        print(f"Found {len(vectors)} vectors in CA21 dataset")
        print("\nSample vectors:")
        print(vectors[["vector", "label", "type"]].head())
    
        # Search for population-related vectors
        print("\nSearching for population vectors:")
        pop_vectors = pc.search_census_vectors("population", "CA21")
        print(pop_vectors[["vector", "label", "type"]].head())
    
    except Exception as e:
        print(f"Error accessing vectors: {e}")


.. GENERATED FROM PYTHON SOURCE LINES 86-90

Getting Census Data
-------------------

Now let's retrieve actual census data for analysis.

.. GENERATED FROM PYTHON SOURCE LINES 90-113

.. code-block:: Python


    print("\nRetrieving Census Data:")
    try:
        # Get population data for Vancouver CMA
        data = pc.get_census(
            dataset="CA21",
            regions={"CMA": "59933"},  # Vancouver CMA
            vectors=["v_CA21_1", "v_CA21_2"],  # Population vectors
            level="CSD"  # Census Subdivision level
        )
    
        print(f"Retrieved data shape: {data.shape}")
        print("\nSample data:")
        print(data.head())
    
        # Basic analysis
        if not data.empty and 'v_CA21_1' in data.columns:
            total_pop = data['v_CA21_1'].sum()
            print(f"\nTotal population in Vancouver CMA: {total_pop:,}")
        
    except Exception as e:
        print(f"Error retrieving census data: {e}")


.. GENERATED FROM PYTHON SOURCE LINES 114-118

Working with Geographic Data
----------------------------

pycancensus can also retrieve geographic boundaries along with the data.

.. GENERATED FROM PYTHON SOURCE LINES 118-146

.. code-block:: Python


    print("\nRetrieving Geographic Data:")
    try:
        # Get census data with geographic boundaries
        geo_data = pc.get_census(
            dataset="CA21",
            regions={"CMA": "59933"},  # Vancouver CMA
            vectors=["v_CA21_1"],  # Population
            level="CSD",
            geo_format="geopandas"
        )
    
        print(f"GeoDataFrame shape: {geo_data.shape}")
        print(f"Columns: {list(geo_data.columns)}")
        if hasattr(geo_data, 'crs'):
            print(f"Coordinate Reference System: {geo_data.crs}")
    
        # Just the geometries
        geometries = pc.get_census_geometry(
            dataset="CA21",
            regions={"CMA": "59933"},
            level="CSD"
        )
        print(f"\nGeometries-only shape: {geometries.shape}")
    
    except Exception as e:
        print(f"Error retrieving geographic data: {e}")


.. GENERATED FROM PYTHON SOURCE LINES 147-151

Vector Hierarchy Navigation
---------------------------

pycancensus provides tools to navigate the hierarchical structure of census variables.

.. GENERATED FROM PYTHON SOURCE LINES 151-170

.. code-block:: Python


    print("\nVector Hierarchy Navigation:")
    try:
        # Find vectors using enhanced search
        income_vectors = pc.find_census_vectors("CA21", "income")
        print(f"Found {len(income_vectors)} income-related vectors")
    
        # Navigate vector hierarchies
        base_vector = "v_CA21_1"  # Total population
        try:
            parents = pc.parent_census_vectors(base_vector, dataset="CA21")
            children = pc.child_census_vectors(base_vector, dataset="CA21")
            print(f"Vector {base_vector}: {len(parents)} parents, {len(children)} children")
        except:
            print("Hierarchy navigation functions not yet implemented")
    
    except Exception as e:
        print(f"Error with vector operations: {e}")


.. GENERATED FROM PYTHON SOURCE LINES 171-182

Summary
-------

This example covered the basic workflow for accessing Canadian Census data:

1. **Setup**: Import pycancensus and set your API key
2. **Explore**: Discover available datasets, regions, and variables
3. **Retrieve**: Get census data for your areas and variables of interest
4. **Analyze**: Work with the data using pandas/geopandas workflows

For more advanced examples, see the other gallery examples and tutorials.

.. GENERATED FROM PYTHON SOURCE LINES 182-190

.. code-block:: Python


    print("\n" + "="*50)
    print("Basic Census Data Access Example Complete")
    print("="*50)
    print("\nNext steps:")
    print("1. Get your free API key at: https://censusmapper.ca/users/sign_up")
    print("2. Set your API key: pc.set_api_key('your_key_here')")  
    print("3. Try running this example with real data!")
    print("4. Explore the other examples in the gallery")

.. _sphx_glr_download_auto_examples_plot_basic_census_data.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_basic_census_data.ipynb <plot_basic_census_data.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_basic_census_data.py <plot_basic_census_data.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_basic_census_data.zip <plot_basic_census_data.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
